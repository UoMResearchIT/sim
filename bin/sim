#!/bin/bash

set -e
set -u

function sim_create()
{
    cores=1
    walltime="100:00:00:00"
    config=default
    input=
    app_args=()

    while [ $# -gt 0 ]; do
        if [ $1 = "--cores" ]; then
            cores="$2"
            shift 2
        elif [ $1 = "--walltime" ]; then
            walltime="$2"
            shift 2
        elif [ $1 = "--input" ]; then
            input="$2"
            shift 2
        elif [ $1 = "--config" ]; then
            config="$2"
            shift 2
        elif [[ $1 =~ -.* ]]; then
            # Unrecognised arguments are passed to the application
            # hook, and are assumed to be of the form --OPTNAME OPTVAL
            app_args+=("$1" "$2")
            shift 2
        else
            # First non-option argument must be the simulation directory
            if [ $# != 1 ]; then
                echo "$0: Too many arguments: ${@}" >&2
                echo "Usage: sim create [options] <simdir>" >&2
                exit 1
            else
                simdir=$1
                shift
            fi
        fi
    done

    echo "Creating simulation $simdir"

    if [ -r $simdir ]; then
        echo "$0: Cannot create simulation because simulation directory $simdir already exists" >&2
        exit 1
    fi

    mkdir -p $simdir
    mkdir $simdir/code
    mkdir $simdir/meta

    if [ -r .git ]; then
        # Git version information
        git describe --dirty >${simdir}/meta/git-describe.txt
        git diff >${simdir}/meta/git-diff.txt
    fi

    configdir=configs/$config

    if [ ! -r $configdir ]; then
        echo "Cannot read config directory $configdir" >&2
        exit 1
    fi

    if [ -r $configdir/setup.sh ]; then
        cp -a $configdir/setup.sh ${simdir}
    fi

    if [ -r $configdir/submit.sh ]; then
        cp -a $configdir/submit.sh ${simdir}
    fi

    if [ -r simhooks/sim-run ]; then
        cp -a simhooks/sim-run ${simdir}
    fi

    if [ -r $simdir/submit.sh ]; then
        # Configure the submission script
        sed -i.bak "s/@CORES@/${cores}/" $simdir/submit.sh
        sed -i.bak "s/@WALLTIME@/${walltime}/" $simdir/submit.sh

        outfile=batchlog.txt
        sed -i.bak "s|@OUTFILE@|${outfile}|" $simdir/submit.sh

        if [ -r simhooks/sim-name ]; then
            simname=$(simhooks/sim-name $simdir)
        else
            simname=${simdir##*/}
        fi

        simname=$(sed 's|/|-|g' <<< "$simname") # Escape / because SGE doesn't allow it in job names
        
        # See https://stackoverflow.com/questions/407523/escape-a-string-for-a-sed-replace-pattern
        simname_sed_escaped=$(sed -e 's/[\/&]/\\&/g' <<< "${simname}")
        sed -i.bak "s/@SIMNAME@/${simname_sed_escaped}/" $simdir/submit.sh

        rm -f $simdir/submit.sh.bak

        echo >> $simdir/submit.sh
        echo "env >meta/env.txt" >> $simdir/submit.sh
        echo "lscpu >meta/lscpu.txt" >> $simdir/submit.sh
        echo "if [ -r setup.sh ]; then source ./setup.sh; fi" >> $simdir/submit.sh
        echo "exec >log.txt 2>&1" >> $simdir/submit.sh
        echo "./sim-run" >> $simdir/submit.sh
    fi

    # Write simulation properties
    cat >$simdir/meta/properties.sh <<EOF 
CORES=${cores}
WALLTIME=${walltime}
EOF

    if [ -r ${simdir}/setup.sh ]; then
        source ${simdir}/setup.sh
    fi

    # Application-specific simulation creation
    app_args+=(${simdir})
    simhooks/sim-create "${app_args[@]}"
}

# Create and submit a new simulation, or submit an existing simulation
function sim_submit()
{
    create_args=()
    continue_sim=0

    while [ $# -gt 0 ]; do
        if [ $1 = "--continue" ]; then
            continue_sim=1
        elif [[ $1 =~ -.* ]]; then
            if [ $# -lt 2 ]; then
                echo "sim_submit: Option $1 specified without a value" >&2
                exit 1
            fi
            create_args+=("$1" "$2")
            shift 2
        else
            # First non-option argument must be the simulation directory
            if [ $# != 1 ]; then
                echo "$0: Too many arguments" >&2
                echo "Usage: sim submit [options] <simdir>" >&2
                exit 1
            else
                simdir=$1
                shift
            fi
        fi
    done

    if [ -r $simdir/log.txt -a ! $continue_sim ]; then
        echo "Simulation $simdir has already been run" >&2
        exit 1
    fi

    # Create the simulation using the provided opts if it does not
    # already exist
    if [ ! -r $simdir ]; then
        create_args+=($simdir)
        sim_create "${create_args[@]}"
    else
        if [ ${#create_args[@]} != 0 ]; then
            echo "Cannot pass simulation creation options to sim submit when submitting an existing simulation" >&2
            exit 1
        fi
    fi

    echo "Submitting simulation $simdir"

    cd $simdir
    qsub submit.sh
}

# Continue an existing simulation by resubmitting it in the same
# directory and assuming the code can carry on where it left off
function sim_continue()
{
    simdir=$1

    if [ ! -r $simdir/log.txt ]; then
        echo "Simulation $simdir has not been run; cannot be continued" >&2
        exit 1
    fi

    echo "Continuing simulation $simdir"

    cd $simdir
    qsub submit.sh
}


command=$1
shift

eval "sim_$command ${@}"
