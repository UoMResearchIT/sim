#!/bin/bash

set -e
set -u

function sim_create()
{
    cores=1
    walltime="100:00:00:00"
    config="rdf"
    inputdata="/nerc/n02/n02/amethyst/new_files"

    while [ $# -gt 0 ]; do
        if [ $1 = "--cores" ]; then
            cores="$2"
            shift 2
        elif [ $1 = "--walltime" ]; then
            walltime="$2"
            shift 2
        elif [[ $1 =~ '-.*' ]]; then
            echo "Unrecognised option $1" >2
            exit 1
        else
            break
        fi
    done

    simdir=$1
    echo "Creating simulation $simdir"

    mkdir $simdir
    mkdir $simdir/code
    mkdir $simdir/results
    mkdir $simdir/meta

    cp -a src/cape_code.py $simdir/code
    cp -a src/function_codes.py $simdir/code
    cp -a src/map_code.py $simdir/code
    rsync -a --exclude .git --exclude staticdata src/MetPy $simdir/code
    cp -a bin/run.sh $simdir

    # conda list --export >${simdir}/meta/conda.txt

    # Git version information
    # echo "CAPECode:" >>${simdir}/meta/git.txt
    # git describe --dirty >>${simdir}/meta/git.txt
    if [ -r src/MetPy ]; then
        (cd src/MetPy; echo "MetPy:"; git describe --dirty; git diff) >>${simdir}/meta/git.txt
    fi

    cp -a configs/$config/setup.sh ${simdir}

    # Create submission script

    cp -a configs/$config/submit.sh ${simdir}

    sed -i.bak "s/@CORES@/${cores}/" $simdir/submit.sh
    sed -i.bak "s/@WALLTIME@/${walltime}/" $simdir/submit.sh

    outfile=results/batchlog.txt
    sed -i.bak "s|@OUTFILE@|${outfile}|" $simdir/submit.sh

    simname=${simdir##*/}
    sed -i.bak "s/@SIMNAME@/${simname}/" $simdir/submit.sh

    rm -f $simdir/submit.sh.bak

    inputdata_abs=$(python -c 'import os; import sys; print(os.path.abspath(sys.argv[1]))' $inputdata)

    ln -s ${inputdata_abs} $simdir/inputdata
    
    echo >> $simdir/submit.sh
    echo "env >meta/env.txt" >> $simdir/submit.sh
    echo "stdbuf -oL -eL ./run.sh >>results/log.txt 2>&1" >> $simdir/submit.sh

    # Write simulation properties
    cat >$simdir/meta/properties.sh <<EOF 
CORES=${cores}
WALLTIME=${walltime}
EOF
}

# Create and submit a new simulation, or submit an existing simulation
function sim_submit()
{
    opts=()
    continue_sim=0

    while [ $# -gt 0 ]; do
        if [ $1 = "--continue" ]; then
            continue_sim=1
        elif [[ $1 =~ -.* ]]; then
            opts+=("$1" "$2")
            shift 2
        else
            break
        fi
    done

    simdir=$1

    if [ -r $simdir/results/log.txt -a ! $continue_sim ]; then
        echo "Simulation $simdir has already been run" >&2
        exit 1
    fi

    # Create the simulation using the provided opts if it does not
    # already exist
    if [ ! -r $simdir ]; then
        if [ ${#opts[@]} = 0 ]; then
            sim_create $simdir
        else
            sim_create "${opts[@]}" $simdir
        fi
    else
        if [ ${#opts[@]} != 0 ]; then
            echo "Cannot pass simulation creation options to sim submit when submitting an existing simulation" >&2
            exit 1
        fi
    fi

    echo "Submitting simulation $simdir"

    cd $simdir
    qsub submit.sh
}

# Continue an existing simulation by resubmitting it in the same
# directory and assuming the code can carry on where it left off
function sim_continue()
{
    simdir=$1

    if [ ! -r $simdir/results/log.txt ]; then
        echo "Simulation $simdir has not been run; cannot be continued" >&2
        exit 1
    fi

    echo "Continuing simulation $simdir"

    cd $simdir
    qsub submit.sh
}


command=$1
shift

eval "sim_$command ${@}"
